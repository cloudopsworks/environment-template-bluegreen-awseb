##
# (c) 2021 - CloudopsWorks OÃœ - https://docs.cloudops.works/
#
module "MODULE_NAME_version" {
  source           = "./modules/aws-elasticbeanstalk-versions"
  region           = var.region
  sts_assume_role  = var.sts_assume_role

  release_name     = "<RELEASE-NAME>"
  source_name      = "<CHART-NAME-ON-REPO"
  source_version   = "<VERSION>"
  namespace        = var.namespace
  solution_stack   = "SOLUTION_STACK"
  repository_owner = var.repository_owner

  application_versions_bucket = local.application_versions_bucket

  beanstalk_application          = "BEANSTALK APPLICATION WHERE TO BUILD"
}

module "MODULE_NAME_app" {
  source           = "./modules/aws-elasticbeanstalk-deploy"
  region           = var.region
  sts_assume_role  = var.sts_assume_role

  release_name     = "<RELEASE-NAME>"
  # source_name      = "<CHART-NAME-ON-REPO"
  # source_version   = "<VERSION>"
  namespace        = var.namespace
  solution_stack   = "SOLUTION_STACK"
  # Solution stack is one of:
  #   java      = "^64bit Amazon Linux 2 (.*) Corretto 8(.*)$"
  #   java11    = "^64bit Amazon Linux 2 (.*) Corretto 11(.*)$"
  #   node      = "^64bit Amazon Linux 2 (.*) Node.js 12(.*)$"
  #   node14    = "^64bit Amazon Linux 2 (.*) Node.js 14(.*)$"
  #   go        = "^64bit Amazon Linux 2 (.*) Go (.*)$"
  #   docker    = "^64bit Amazon Linux 2 (.*) Docker (.*)$"
  #   docker-m  = "^64bit Amazon Linux 2 (.*) Multi-container Docker (.*)$"
  #   java-amz1 = "^64bit Amazon Linux (.*)$ running Java 8(.*)$"
  #   node-amz1 = "^64bit Amazon Linux (.*)$ running Node.js(.*)$"

  # repository_owner = var.repository_owner
  application_version_label = module.MODULE_NAME_version.application_version_label

  private_subnets = [
    "PRIVATE SUBNET LIST TO DEPLOY INSTANCE & APP",
  ]

  public_subnets = [
    "PUBLIC SUBNET LIST TO DEPLOY INSTANCE & APP",
  ]

  vpc_id = "VPC ID WHERE TO DEPLOY"

  server_types = [ 
    "SERVER TYPES LIST THIS WILL HELP TO ALLOCATE DEPLOY",
  ]

  # application_versions_bucket = local.application_versions_bucket

  beanstalk_application          = "BEANSTALK APPLICATION WHERE TO BUILD"
  beanstalk_ec2_key              = "EXISITNG EC2 KEY (SSH)"
  beanstalk_ami_id               = "EXISITNG AMI TO BASE RUN"
  beanstalk_instance_port        = 8081
  beanstalk_enable_spot          = true
  beanstalk_default_retention    = 90
  beanstalk_instance_volume_size = 64
  beanstalk_instance_volume_type = "gp2"

  load_balancer_public             = false
  load_balancer_log_bucket         = local.load_balancer_log_bucket
  load_balancer_log_prefix         = "<RELEASE-NAME>"
  load_balancer_ssl_certificate_id = "EXISTING CERTIFICATE"
  #load_balancer_alias              = "OVERRIDE LB ALIAS"

  ##
  # Optionals: uncomment to leave this module to manage DNS association.
  # domain_name              = "DOMAIN WHERE TO CREATE ALIAS"
  # domain_name_alias_prefix = "DOMAIN NAME ALIAS"
  ##
  # Optional variable for mapping ports to backend ports:
  # port_mappings = [
  #   {
  #     name      = "default"
  #     from_port = 80
  #     to_port   = 8080
  #     protocol  = "HTTP"
  #   },
  #   {
  #     name             = "port443"
  #     from_port        = 443
  #     to_port          = 8443
  #     protocol         = "HTTPS"
  #     backend_protocol = "HTTPS"
  #   }
  # ]

  # Optional variable injection other than standard values/MODULE_NAME-values.yaml
  #
  # vars = {
  #   "var"          = "DATA"
  #   "varfile"      = file("textfile.txt)
  #   "encoded file" = filebas64("binaryfile.bin")
  # }
}

