##
# (c) 2021 - CloudopsWorks OÃœ - https://docs.cloudops.works/
#
name: Slash command on Continue Blue/Green
on:
  repository_dispatch:
    types:
      - continue-command
      - next-command
permissions:
  issues: write
  contents: write
  packages: read
  statuses: write
  pull-requests: write

jobs:
  checkpoint:
    runs-on: ubuntu-latest
    steps:
      # Install terraform
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      # Get pull request head
      - name: Get Pull Request HEAD Ref
        uses: actions/github-script@v4
        id: the_pull
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          result-encoding: string
          script: |
            const pull_request_number = '${{ github.event.client_payload.slash_command.args.named.pull_request_number }}';
            const {data: thePull} = await github.pulls.get({
              pull_number: pull_request_number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return thePull.head.ref;

      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ steps.the_pull.outputs.result }}
          token: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Retrieve Labels for next step
        id: checkpoint
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const pull_request_number = '${{ github.event.client_payload.slash_command.args.named.pull_request_number }}';
 
            const {data: pullLabels} = await github.issues.listLabelsOnIssue({
              issue_number: pull_request_number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const labels = pullLabels.map(label => label.name);

            const is_blue = labels.filter(aLabel => aLabel == 'blue').length == 1;
            const is_green = labels.filter(aLabel => aLabel == 'green').length == 1;
            const to_blue = labels.filter(aLabel => aLabel == 'blue-green/blue').length == 1;
            const to_green = labels.filter(aLabel => aLabel == 'blue-green/green').length == 1;
            const run_both = labels.filter(aLabel => aLabel == 'blue-green/both').length == 1;
            const switch_both = (is_blue && to_green) || (is_green && to_blue);

            const result = {
              is_blue: is_blue,
              is_green: is_green,
              to_blue: to_blue,
              to_green: to_green,
              run_both: run_both,
              switch_both: switch_both
            };

            return result;
      
      - name: Terraform Select Blue Workspace
        if: fromJSON(steps.checkpoint.outputs.result).to_blue == 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: terraform workspace select blue

      - name: Terraform Select Green Workspace
        if: fromJSON(steps.checkpoint.outputs.result).to_green == 1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: terraform workspace select green

      - name: Create Plan Directory
        run: mkdir -p ./.plans
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file=$(cat .tier_enabled).tfvars -out ./.plans/plan.out
        continue-on-error: false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Apply - This happens only if condition
        id: applyboth
        run: terraform apply -no-color ./.plans/plan.out
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Report terraform apply output
        uses: actions/github-script@v4
        env:
          APPLY: "terraform\n${{ steps.applyboth.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const pull_request_number = '${{ github.event.client_payload.slash_command.args.named.pull_request_number }}';
            const output = `#### Terraform Apply ðŸ“–\`${{ steps.applyboth.outcome }}\`
            
            <details><summary>Show apply report</summary>
            
            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`
            
            </details>

            Submit: */continue* in order to continue with next step of Blue/Green Deployment.
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: pull_request_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Check Beacon file
        id: beacon
        run: |
          check=
          if [ -f .beacon ] ; then
            check=$(cat .beacon)
          fi
          echo "::set-output name=check::$check"

      - name: Create Beacon file in order to go next step as Deployed
        if: steps.beacon.outputs.check == ''
        run: |
          make deployed-beacon
          make open-traffic

      - name: Create Beacon file in order to go next step as Complete
        if: steps.beacon.outputs.check == 'deployed'
        run: make completed-beacon

      - name: Push change to branch
        run: |
          git add .
          git config --global user.name "${{ secrets.BOT_USER }}"
          git config --global user.email "${{ secrets.BOT_EMAIL }}"
          git commit -a -m "chore: Pushing changes for this step."
          git push origin

      - name: Label entry at proper step
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const checkpoint = JSON.parse('${{ steps.checkpoint.outputs.result }}');
            const pull_request_number = '${{ github.event.client_payload.slash_command.args.named.pull_request_number }}';

            const {data: pullLabels} = await github.issues.listLabelsOnIssue({
              issue_number: pull_request_number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const labels = pullLabels.map(label => label.name);

            if ( checkpoint.switch_both ) {
              if ( labels.filter(aLabel => aLabel == 'blue').length == 1 ) {
                github.issues.removeLabel({
                  issue_number: pull_request_number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'blue'
                });
              }
              if ( labels.filter(aLabel => aLabel == 'green').length == 1 ) {
                github.issues.removeLabel({
                  issue_number: pull_request_number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  name: 'green'
                });
              }
              github.issues.addLabels({
                issue_number: pull_request_number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: [ 'blue-green/both' ]
              });
            }
