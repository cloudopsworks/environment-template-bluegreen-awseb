##
# (c) 2021 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Slash command on Approve/LGTM
on:
  repository_dispatch:
    types:
      - open-new-command

permissions:
  issues: write
  contents: write
  packages: read
  statuses: write
  pull-requests: write

jobs:
  open-new-traffic:
    runs-on: ubuntu-latest
    steps:
      # Get pull request head
      - name: Get Pull Request HEAD Ref
        uses: actions/github-script@v4
        id: the_pull
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          result-encoding: string
          script: |
            const pull_request_number = '${{ github.event.client_payload.slash_command.args.named.pull_request_number }}';
            const {data: thePull} = await github.pulls.get({
              pull_number: pull_request_number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return thePull.head.ref;

      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ steps.the_pull.outputs.result }}
          token: ${{ secrets.BOT_TOKEN }}

      - name: Open new Traffic Script
        run: make open-new-traffic

      - name: Push change to branch
        run: |
          git add .
          git config --global user.name "${{ secrets.BOT_USER }}"
          git config --global user.email "${{ secrets.BOT_EMAIL }}"
          git commit -a -m "chore: Pushing changes for opening new version's traffic."
          git push origin

  # approved-next-action:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - approve
  #   if: fromJSON(needs.approve.outputs.nextstep) == 'next'
  #   steps:
  #     # Install terraform
  #     - uses: hashicorp/setup-terraform@v1

  #     # Get pull request head
  #     - name: Get Pull Request HEAD Ref
  #       uses: actions/github-script@v4
  #       id: the_pull
  #       with:
  #         github-token: ${{secrets.BOT_TOKEN}}
  #         result-encoding: string
  #         script: |
  #           const pull_request_number = '${{ github.event.client_payload.slash_command.args.named.pull_request_number }}';
  #           const {data: thePull} = await github.pulls.get({
  #             pull_number: pull_request_number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo
  #           });
  #           return thePull.head.ref;

  #     # Proceed with checkout of source with all the references (depth=0)  
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #         ref: ${{ steps.the_pull.outputs.result }}
  #         token: ${{ secrets.BOT_TOKEN }}

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
  #         GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

  #     - name: Retrieve Labels for next step
  #       id: checkpoint
  #       uses: actions/github-script@v4
  #       with:
  #         github-token: ${{secrets.BOT_TOKEN}}
  #         script: |
  #           const pull_request_number = '${{ github.event.client_payload.slash_command.args.named.pull_request_number }}';
 
  #           const {data: pullLabels} = await github.issues.listLabelsOnIssue({
  #             issue_number: pull_request_number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo
  #           });

  #           const labels = pullLabels.map(label => label.name);

  #           const is_blue = labels.filter(aLabel => aLabel == 'blue').length == 1;
  #           const is_green = labels.filter(aLabel => aLabel == 'green').length == 1;
  #           const to_blue = labels.filter(aLabel => aLabel == 'blue-green/blue').length == 1;
  #           const to_green = labels.filter(aLabel => aLabel == 'blue-green/green').length == 1;
  #           const run_both = labels.filter(aLabel => aLabel == 'blue-green/both').length == 1;
  #           const switch_both = (is_blue && to_green) || (is_green && to_blue);

  #           const result = {
  #             is_blue: is_blue,
  #             is_green: is_green,
  #             to_blue: to_blue,
  #             to_green: to_green,
  #             run_both: run_both,
  #             switch_both: switch_both
  #           };

  #           return result;
      
  #     - name: Terraform Select Blue Workspace
  #       if: fromJSON(steps.checkpoint.outputs.result).to_blue == 1
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
  #         GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
  #       run: terraform workspace select blue

  #     - name: Terraform Select Green Workspace
  #       if: fromJSON(steps.checkpoint.outputs.result).to_green == 1
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
  #         GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
  #       run: terraform workspace select green

  #     - name: Create Plan Directory
  #       run: mkdir -p ./.plans
  #     - name: Terraform Plan
  #       id: plan
  #       run: terraform plan -no-color -var-file=$(cat .tier_enabled).tfvars -out ./.plans/plan.out
  #       continue-on-error: false
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
  #         HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
  #         HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
  #         HELM_EXPERIMENTAL_OCI: "1"
  #         GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

  #     - name: Terraform Apply
  #       id: apply
  #       run: terraform apply -no-color ./.plans/plan.out
  #       continue-on-error: true
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
  #         HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
  #         HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
  #         HELM_EXPERIMENTAL_OCI: "1"
  #         GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

  #     - name: Report terraform apply output
  #       uses: actions/github-script@v4
  #       env:
  #         PLAN: "terraform plan\n${{ steps.plan.outputs.stdout }}"
  #         APPLY: "terraform apply\n${{ steps.apply.outputs.stdout }}"
  #       with:
  #         github-token: ${{ secrets.BOT_TOKEN }}
  #         script: |
  #           const pull_request_number = '${{ github.event.client_payload.slash_command.args.named.pull_request_number }}';
  #           const output = `## Changes reconciled on New Environment
  #           #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
  #           #### Terraform Apply ðŸ“–\`${{ steps.apply.outcome }}\`
  #           <details><summary>Show plan/apply report</summary>
            
  #           \`\`\`\n
  #           ${process.env.PLAN}
  #           ---\n
  #           ${process.env.APPLY}
  #           \`\`\`
            
  #           </details>

  #           Submit: */approve | /approved | /lgtm* in order to continue with next step of Blue/Green Deployment.
            
  #           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
  #           github.issues.createComment({
  #             issue_number: pull_request_number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })

  #     - name: Check Beacon file
  #       id: beacon
  #       run: |
  #         check=
  #         if [ -f .beacon ] ; then
  #           check=$(cat .beacon)
  #         fi
  #         echo "::set-output name=check::$check"

  #     - name: Create Beacon file in order to go next step as Deployed
  #       if: steps.beacon.outputs.check == '' && steps.apply.outcome == 'success'
  #       run: make open-new-traffic

  #     - name: Create Beacon file in order to go next step as Switched
  #       if: steps.beacon.outputs.check == 'deployed' && steps.apply.outcome == 'success'
  #       run: make close-old-traffic

  #     - name: Create Beacon file in order to go next step as Complete
  #       if: steps.beacon.outputs.check == 'switched' && steps.apply.outcome == 'success'
  #       run: make completed-beacon

  #     ### Processing of last step in blue/green deployment
  #     - name: Terraform Select Green Workspace - Apply on Old Env
  #       if: fromJSON(steps.checkpoint.outputs.result).to_blue == 1 && steps.beacon.outputs.check == 'switched'
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
  #         GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
  #       run: terraform workspace select green

  #     - name: Terraform Select Blue Workspace - Apply on Old Env
  #       if: fromJSON(steps.checkpoint.outputs.result).to_green == 1 && steps.beacon.outputs.check == 'switched'
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
  #         GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
  #       run: terraform workspace select blue
 
  #     - name: Terraform Plan - Apply on Old Env
  #       id: plan-on-old
  #       if: steps.beacon.outputs.check == 'switched'
  #       run: terraform plan -no-color -var-file=$(cat .destroy).tfvars -target 'module.app_dns[0]' -out ./.plans/plan.out
  #       continue-on-error: false
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
  #         HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
  #         HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
  #         HELM_EXPERIMENTAL_OCI: "1"
  #         GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

  #     - name: Terraform Apply - Apply on Old Env
  #       id: apply-on-old
  #       if: steps.beacon.outputs.check == 'switched'
  #       run: terraform apply -no-color ./.plans/plan.out
  #       continue-on-error: true
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
  #         HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
  #         HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
  #         HELM_EXPERIMENTAL_OCI: "1"
  #         GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

  #     - name: Report terraform apply output
  #       uses: actions/github-script@v4
  #       if: steps.beacon.outputs.check == 'switched'
  #       env:
  #         PLAN: "terraform plan\n${{ steps.plan.outputs.stdout }}"
  #         APPLY: "terraform apply\n${{ steps.apply.outputs.stdout }}"
  #       with:
  #         github-token: ${{ secrets.BOT_TOKEN }}
  #         script: |
  #           const pull_request_number = '${{ github.event.client_payload.slash_command.args.named.pull_request_number }}';
  #           const output = `## Changes Reconciled on Old Environment:
  #           #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
  #           #### Terraform Apply ðŸ“–\`${{ steps.apply.outcome }}\`
  #           <details><summary>Show plan/apply report for Old Environment</summary>
            
  #           \`\`\`\n
  #           ${process.env.PLAN}
  #           ---\n
  #           ${process.env.APPLY}
  #           \`\`\`
            
  #           </details>

  #           Submit: */approve | /approved | /lgtm* in order to continue with next step of Blue/Green Deployment.
            
  #           *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
  #           github.issues.createComment({
  #             issue_number: pull_request_number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })
  #     ### Processing of last step in blue/green deployment

  #     - name: Label entry at proper step
  #       if: steps.apply.outcome == 'success'
  #       uses: actions/github-script@v4
  #       with:
  #         github-token: ${{secrets.BOT_TOKEN}}
  #         script: |
  #           const checkpoint = JSON.parse('${{ steps.checkpoint.outputs.result }}');
  #           const pull_request_number = '${{ github.event.client_payload.slash_command.args.named.pull_request_number }}';
  #           const beacon_result = '${{ steps.beacon.outputs.check }}'
  #           const apply_old_result = '${{ steps.apply-on-old.outcome }}'

  #           const {data: pullLabels} = await github.issues.listLabelsOnIssue({
  #             issue_number: pull_request_number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo
  #           });

  #           const labels = pullLabels.map(label => label.name);

  #           if ( checkpoint.switch_both ) {
  #             if ( checkpoint.is_blue ) {
  #               github.issues.removeLabel({
  #                 issue_number: pull_request_number,
  #                 owner: context.repo.owner,
  #                 repo: context.repo.repo,
  #                 name: 'blue'
  #               });
  #             }
  #             if ( checkpoint.is_green ) {
  #               github.issues.removeLabel({
  #                 issue_number: pull_request_number,
  #                 owner: context.repo.owner,
  #                 repo: context.repo.repo,
  #                 name: 'green'
  #               });
  #             }
  #             github.issues.addLabels({
  #               issue_number: pull_request_number,
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               labels: [ 'blue-green/both' ]
  #             });
  #           }
  #           if ( beacon_result == 'switched' && apply_old_result == 'success' ) {
  #             github.issues.addLabels({
  #               issue_number: pull_request_number,
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               labels: [ 'blue-green/completed' ]
  #             });
  #             github.issues.removeLabel({
  #               issue_number: pull_request_number,
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               name: 'do-not-merge'
  #             });
  #           }

  #     - name: Push change to branch
  #       uses: EndBug/add-and-commit@v9
  #       with:
  #         add: "."
  #         author_name: ${{ secrets.BOT_USER }}
  #         author_email: ${{ secrets.BOT_EMAIL }}
  #         message: "chore: Pushing changes for this step: ${{ steps.beacon.outputs.check }}."

  #     # - name: Push change to branch
  #     #   if: steps.apply.outcome == 'success' && steps.apply_on_old != 'failure'
  #     #   run: |
  #     #     git add .
  #     #     git config --global user.name "${{ secrets.BOT_USER }}"
  #     #     git config --global user.email "${{ secrets.BOT_EMAIL }}"
  #     #     git commit -a -m "chore: Pushing changes for this step: ${{ steps.beacon.outputs.check }}."
  #     #     git push origin

