## 
# (c) 2021 - Cloud Ops Works LLC - https://cloudops.works/
#            On GitHub: https://github.com/cloudopsworks
#            Distributed Under Apache v2.0 License
#
name: Environment Plan on Pull request
on:
  pull_request:
    types:
      - opened
      - synchronize
    paths-ignore:
      - ".github/workflows/**"
      - "modules/**"
      - ".beacon"
      - ".destroy"
  
  # pull_request_target:
  #   types:
  #     - opened
  #   paths-ignore:
  #     - ".github/workflows/**"

permissions:
  contents: read
  packages: write
  statuses: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  plan:
    runs-on: ubuntu-latest
    outputs:
      auto_approve: ${{ steps.check_automatic.outputs.autoapprove }}
      bluegreen_label: ${{ steps.bluegreen.outputs.label }}
      bluegreen_nextlabel: ${{ steps.bluegreen.outputs.nextlabel }}
      bluegreen_action: ${{ steps.bluegreen.outputs.action_plan }}
    steps:
      - uses: actions/labeler@v3
        with:
          repo-token: ${{ secrets.BOT_TOKEN }}

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "::set-output name=owner::$repo_owner"
          echo "::set-output name=repo_name::$repo_name"

      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.6.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - uses: hashicorp/setup-terraform@v1

      - name: Check if automatic
        id: check_automatic
        run: |
          is_auto=$(yq e '.automatic' OWNERS)
          if [[ "$is_auto" != "true" ]] ; then
            is_auto=false
          fi
          echo "::set-output name=autoapprove::$is_auto"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        continue-on-error: true

      - name: Check Workspaces
        id: workspace
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          terraform workspace list

      - name: Create Workspace BLUE
        id: blue-workspace
        if: ${{ ! contains(steps.workspace.outputs.stdout, 'blue') }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          terraform workspace new blue

      - name: Create Workspace GREEN
        id: green-workspace
        if: ${{ ! contains(steps.workspace.outputs.stdout, 'green') }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          terraform workspace new green

      - name: Blue Green Deployment staging check
        id: bluegreen
        run: |
          label=$(cat .tier_enabled)
          action=$(cat .beacon | head -1)
          nextlabel="blue-green/$label"

          echo "::set-output name=action_plan::${action}"
          echo "::set-output name=nextlabel::${nextlabel}"
          echo "::set-output name=label::${label}"

      - name: Report Validations Output
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `#### Action Step: \`${{ steps.bluegreen.outputs.action_plan }}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          
  deploy:
    runs-on: ubuntu-latest
    needs:
      - plan
    if: needs.plan.outputs.bluegreen_action != 'rollback'
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Workspace Switch
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: terraform workspace select ${{ needs.plan.outputs.bluegreen_label }}

      - name: Create Plan Directory
        run: mkdir -p ./.plans
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file=$(cat .tier_enabled).tfvars -out ./.plans/plan.out
        continue-on-error: ${{ needs.plan.outputs.auto_approve != 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Report Plan Output
        uses: actions/github-script@v4
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `#### Action Step: \`${{ needs.plan.outputs.bluegreen_action }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        id: apply
        if: steps.plan.outcome == 'success'
        run: terraform apply -no-color ./.plans/plan.out
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Report terraform apply output
        uses: actions/github-script@v4
        env:
          APPLY: "terraform apply\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `## Changes reconciled on New Environment
            #### Action Step: \`${{ needs.plan.outputs.bluegreen_action }}\`
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
            <details><summary>Show plan/apply report</summary>
            
            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`
            
            </details>

            Submit: */open-new | /close-old | /force-switch* in order to continue with next step of Blue/Green Deployment.
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  disable-old:
    runs-on: ubuntu-latest
    needs:
      - plan
      - deploy
    if: needs.plan.outputs.bluegreen_action == 'close_old'
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - uses: hashicorp/setup-terraform@v1

      - name: Blue Green Deployment destroy check
        id: destroy
        run: |
          label=$(cat .destroy)

          echo "::set-output name=label::${label}"

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Workspace Switch
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: terraform workspace select ${{ steps.destroy.outputs.label }}

      - name: Create Plan Directory
        run: mkdir -p ./.plans
      - name: Terraform Plan
        id: plan
        run: terraform plan -target module.app_dns -no-color -var-file=$(cat .destroy).tfvars -out ./.plans/plan.out
        continue-on-error: ${{ needs.plan.outputs.auto_approve != 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Report Plan Output
        uses: actions/github-script@v4
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `#### Action Step: \`${{ needs.plan.outputs.bluegreen_action }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        id: apply
        if: steps.plan.outcome == 'success'
        run: terraform apply -no-color ./.plans/plan.out
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Report terraform apply output
        uses: actions/github-script@v4
        env:
          APPLY: "terraform apply\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `## Changes reconciled on Old Environment
            #### Action Step: \`${{ needs.plan.outputs.bluegreen_action }}\`
            #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
            <details><summary>Show plan/apply report</summary>
            
            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`
            
            </details>

            Submit: */approve | /approved | /lgtm* in order to continue with next step of Blue/Green Deployment.
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  label_autoapprove:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ needs.plan.outputs.auto_approve == 'true' }}
    steps:
      - uses: actions/github-script@v4
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['approved', 'automatic-environment']
            })

  add_reviewers_and_approvals:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ needs.plan.outputs.auto_approve != 'true' }}
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Read reviewers from file
        id: reviewers
        run: |
          count=$(yq e '.requiredReviewers' OWNERS)
          reviewers_as_json=$(yq e -j -I=0 '.reviewers' OWNERS)
          echo "::set-output name=count::$count"
          echo "::set-output name=as_json::$reviewers_as_json"

      - name: Add review and approval labels
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const reviewers_json=JSON.parse('${{ steps.reviewers.outputs.as_json }}');
            const reviewers_count=${{ steps.reviewers.outputs.count }};
            const label='${{ needs.plan.outputs.bluegreen_label }}';
            const nextlabel='${{ needs.plan.outputs.bluegreen_nextlabel }}';
            const labels = ['approval-required','review-required'];
            const actor = '${{ github.event.pull_request.user.login }}'

            if ( nextlabel != '' )
              labels.push(nextlabel)

            var reviewers = []
            for ( const rev of reviewers_json ) {
              if ( actor != rev ) {
                reviewers.push(rev)
              }
            }

            github.pulls.requestReviewers({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              reviewers: reviewers
            });

            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });

  do_not_merge_label:
    needs:
      - plan
    runs-on: ubuntu-latest
    if: ${{ needs.plan.outputs.auto_approve != 'true' }}
    outputs:
      is_mergeable: ${{ steps.check.outputs.result }}
    steps:
      - name: Set DO-NOT-MERGE if not in last step
        id: check
        uses: actions/github-script@v4
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          result-encoding: string
          script: |
            const {data: pullLabels} = await github.issues.listLabelsOnIssue({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const labels = pullLabels.map(label => label.name);

            var is_mergeable = false;

            for (const aLabel of labels) {
              if ( aLabel == 'blue-green/new' || aLabel == 'blue-green/completed' ) {
                is_mergeable = true;
              }
            }

            if ( ! is_mergeable ) {
              github.issues.addLabels({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: [ 'do-not-merge' ]
              });
            }

            return ( is_mergeable ? 'true' : 'false' );

  # Below does not work on pull request.
  # wipe-beacon-files:
  #   needs:
  #     - plan
  #     - do_not_merge_label
  #   runs-on: ubuntu-latest
  #   if: ${{ needs.do_not_merge_label.outputs.is_mergeable == 'true' }}
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         token: ${{ secrets.BOT_TOKEN }}

  #     - name: Remove beacon files
  #       run: |
  #         [ -f .destroy ] && rm -f .destroy
  #         [ -f .beacon ] && rm -f .beacon

  #     - name: Commit and push
  #       uses: EndBug/add-and-commit@v9
  #       with:
  #         push: true
  #         add: "."
  #         author_name: ${{ secrets.BOT_USER }}
  #         author_email: ${{ secrets.BOT_EMAIL }}
  #         message: "chore: remove of beacon files, ready to merge."
  rollback-on-master:
    needs:
      - plan
    if: needs.plan.outputs.bluegreen_action == 'rollback'
    runs-on: ubuntu-latest
    steps:
      # Install terraform
      - uses: hashicorp/setup-terraform@v1

      # Get pull request base
      - name: Get Pull Request BASE Ref
        uses: actions/github-script@v4
        id: the_pull
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          result-encoding: string
          script: |
            const {data: thePull} = await github.pulls.get({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return thePull.base.ref;

      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ steps.the_pull.outputs.result }}
          token: ${{ secrets.BOT_TOKEN }}

      - name: Retrieve tier to run
        id: tier_to_run
        run: |
          tier=

          if [ -f .tier_enabled ] ; then
            tier=$(cat .tier_enabled) 
          fi
          echo "::set-output name=tier::$tier"

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Create Plan Directory
        run: mkdir -p ./.plans
      - name: Terraform Select Master Workspace
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: terraform workspace select ${{ steps.tier_to_run.outputs.tier }}

      - name: Terraform Plan on Master Rollback Traffic
        id: plan
        if: steps.tier_to_run.outputs.tier != ''
        run: terraform plan -no-color -var-file=${{ steps.tier_to_run.outputs.tier }}.tfvars -out ./.plans/plan.out
        continue-on-error: false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Apply on Master Workspace
        id: apply
        if: steps.tier_to_run.outputs.tier != ''
        run: terraform apply -no-color ./.plans/plan.out
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Report terraform apply output
        uses: actions/github-script@v4
        env:
          PLAN: "terraform plan ${{ steps.tier_to_run.outputs.tier }}\n${{ steps.plan.outputs.stdout }}"
          APPLY: "terraform apply ${{ steps.tier_to_run.outputs.tier }}\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `##Rolback result on Master
            #### Terraform Plan ${{ steps.tier_to_run.outputs.tier }}üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Apply ${{ steps.tier_to_run.outputs.tier }}üìñ\`${{ steps.apply.outcome }}\`
            <details><summary>Show plan/apply report</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            ---\n
            ${process.env.APPLY}
            \`\`\`
            
            </details>

            Rollback Complete Pull request may be closed!
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  rollback-on-branch:
    needs:
      - plan
      - rollback-on-master
    if: needs.plan.outputs.bluegreen_action == 'rollback'
    runs-on: ubuntu-latest
    steps:
      # Install terraform
      - uses: hashicorp/setup-terraform@v1

      # Get pull request head
      - name: Get Pull Request HEAD Ref
        uses: actions/github-script@v4
        id: the_pull
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          result-encoding: string
          script: |
            const {data: thePull} = await github.pulls.get({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            return thePull.head.ref;

      # Proceed with checkout of source with all the references (depth=0)  
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ steps.the_pull.outputs.result }}
          token: ${{ secrets.BOT_TOKEN }}

      - name: Retrieve tier to run
        id: tier_to_run
        run: |
          tier=

          if [ -f .tier_enabled ] ; then
            tier=$(cat .tier_enabled) 
          fi
          echo "::set-output name=tier::$tier"

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Rollback Changes for apply afterwards
        run: make rollback
      
      - name: Create Plan Directory
        run: mkdir -p ./.plans
      - name: Terraform Select Master Workspace
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: terraform workspace select ${{ steps.tier_to_run.outputs.tier }}

      - name: Terraform Plan on Master Rollback Traffic
        id: plan
        if: steps.tier_to_run.outputs.tier != ''
        run: terraform plan -no-color -var-file=${{ steps.tier_to_run.outputs.tier }}.tfvars -out ./.plans/plan.out
        continue-on-error: false
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Apply on Master Workspace
        id: apply
        if: steps.tier_to_run.outputs.tier != ''
        run: terraform apply -no-color ./.plans/plan.out
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Report terraform apply output
        uses: actions/github-script@v4
        env:
          PLAN: "terraform plan ${{ steps.tier_to_run.outputs.tier }}\n${{ steps.plan.outputs.stdout }}"
          APPLY: "terraform apply ${{ steps.tier_to_run.outputs.tier }}\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `##Rolback result on Branch
            #### Terraform Plan ${{ steps.tier_to_run.outputs.tier }}üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Apply ${{ steps.tier_to_run.outputs.tier }}üìñ\`${{ steps.apply.outcome }}\`
            <details><summary>Show plan/apply report</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            ---\n
            ${process.env.APPLY}
            \`\`\`
            
            </details>

            Rollback Complete Pull request may be closed!
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  close-pull:
    runs-on: ubuntu-latest
    needs:
      - plan
      - rollback-on-master
      - rollback-on-branch
    if: needs.plan.outputs.bluegreen_action == 'rollback'
    steps:
      - name: Closes the Pull Request
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const {data: thePull} = await github.pulls.get({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            })

            github.pulls.update({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
            });
