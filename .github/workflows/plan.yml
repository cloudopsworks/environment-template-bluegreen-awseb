##
# (c) 2021 - CloudopsWorks O√ú - https://docs.cloudops.works/
#
name: Environment Plan on Pull request
on:
  pull_request:
    
  # pull_request_target:
  #   types:
  #     - opened
  #     - synchronize

permissions:
  contents: read
  packages: write
  statuses: write
  pull-requests: write
  issues: write
  checks: write

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/labeler@v3
        with:
          repo-token: ${{ secrets.BOT_TOKEN }}

      # Get the owner repo
      - name: Get owner
        id: getowner
        run: |
          repo_owner=`echo "$GITHUB_REPOSITORY" | cut -f 1 -d "/"`
          repo_name=`echo "$GITHUB_REPOSITORY" | cut -f 2 -d "/"`
          echo "::set-output name=owner::$repo_owner"
          echo "::set-output name=repo_name::$repo_name"

      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.BOT_TOKEN }}

      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.6.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - uses: hashicorp/setup-terraform@v1

      - name: Check if automatic
        id: check_automatic
        run: |
          is_auto=$(yq e '.automatic' OWNERS)
          if [[ "$is_auto" != "true" ]] ; then
            is_auto=false
          fi
          echo "::set-output name=autoapprove::$is_auto"

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          GITHUB_API_TOKEN: ${{ secrets.BOT_TOKEN }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Extract Current version from terraform state
        id: current_version
        continue-on-error: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
        run: |
          ref="${{ github.head_ref }}"
          trimref="${ref%-v*[0-9]\.*[0-9]\.*[0-9]}"
          TARGET="${trimref##promote-}"
          current_ver=$(terraform output -raw ${TARGET}_current_version)
          ret=$?
          if [ $ret -eq 0 ] ; then
            echo "::set-output name=result::$current_ver"
          else
            echo "::set-output name=result::"
          fi

      - name: Blue Green Deployment staging check
        id: bluegreen
        run: |
          label=
          nextlabel=
          switch=
          ref="${{ github.head_ref }}"
          trimref="${ref%-v*[0-9]\.*[0-9]\.*[0-9]}"
          TARGET="${trimref##promote-}"
          current_ver="${{ steps.current_version.outputs.result }}"
          if [[ "$current_ver" == "" ]] ; then
            label="blue"
            nextlabel="blue-green/new"
            switch=0
          else
            if [ -f ${TARGET}-deploy-blue.tf ] ; then
              label="blue"
              nextlabel="blue-green/green"
              switch=1
            fi
            if [ -f ${TARGET}-deploy-green.tf ] ; then
              label="green"
              nextlabel="blue"
              switch=1
            fi
          fi
          echo "::set-output name=switch::${switch}"
          echo "::set-output name=nextlabel::${nextlabel}"
          echo "::set-output name=label::${label}"

      - name: Create Plan Directory
        run: mkdir -p ./.plans
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out ./.plans/plan.out
        continue-on-error: ${{ steps.check_automatic.outputs.autoapprove != 'true' }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.TF_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.TF_AWS_SECRET_ACCESS_KEY }}
          HELM_CREDS_USER: ${{ secrets.AZURE_SERVICE_ID }}
          HELM_CREDS_PASSWORD: ${{ secrets.AZURE_SERVICE_SECRET }}
          HELM_EXPERIMENTAL_OCI: "1"

      - uses: actions/upload-artifact@v2
        with:
          name: environment-release-plan
          path: ./.plans/plan.out
          #if-no-files-found: error

      - uses: actions/github-script@v4
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outputs.stdout }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - uses: actions/github-script@v4
        if: ${{ steps.check_automatic.outputs.autoapprove == 'true' }}
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['approved', 'automatic-environment']
            })
      
      - name: Read reviewers from file
        id: reviewers
        if: ${{ steps.check_automatic.outputs.autoapprove != 'true' }}
        run: |
          count=$(yq e '.requiredReviewers' OWNERS)
          reviewers_as_json=$(yq e -j -I=0 '.reviewers' OWNERS)
          echo "::set-output name=count::$count"
          echo "::set-output name=as_json::$reviewers_as_json"

      - name: Add review and approval labels
        uses: actions/github-script@v4
        if: ${{ steps.check_automatic.outputs.autoapprove != 'true' }}
        with:
          github-token: ${{secrets.BOT_TOKEN}}
          script: |
            const reviewers_json=JSON.parse('${{ steps.reviewers.outputs.as_json }}');
            const reviewers_count=${{ steps.reviewers.outputs.count }};
            const label='${{ steps.bluegreen.outputs.label }}';
            const nextlabel='${{ steps.bluegreen.outputs.nextlabel }}';
            const labels = ['approval-required','review-required'];
            const actor = '${{ github.event.pull_request.user.login }}'

            if ( label != '' )
              labels.push(label);

            if ( nextlabel != '' )
              labels.push(nextlabel)

            var reviewers = []
            for ( const rev of reviewers_json ) {
              if ( actor != rev ) {
                reviewers.push(rev)
              }
            }

            github.pulls.requestReviewers({
              pull_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              reviewers: reviewers
            });

            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: labels
            });
